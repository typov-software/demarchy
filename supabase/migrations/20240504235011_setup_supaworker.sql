create extension if not exists "pgtap" with schema "extensions";
CREATE SCHEMA IF NOT EXISTS "supaworker";
CREATE TABLE IF NOT EXISTS "supaworker"."jobs" (
  "id" bigint NOT NULL,
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
  "queue" "text" NOT NULL,
  "enabled" boolean DEFAULT true NOT NULL,
  "attempts" smallint DEFAULT '0'::smallint NOT NULL,
  "options" "jsonb",
  "payload" "jsonb"
);
ALTER TABLE "supaworker"."jobs" OWNER TO "postgres";
CREATE OR REPLACE FUNCTION "supaworker"."dequeue"("queue_name" character varying) RETURNS SETOF "supaworker"."jobs" LANGUAGE "plpgsql" AS $$ #variable_conflict use_variable
  begin return query
delete from "supaworker"."jobs"
where id = (
    select id
    from "supaworker"."jobs"
    where enabled = true
      and queue = queue_name
    order by created_at asc for
    update skip locked
    limit 1
  )
returning *;
end;
$$;
ALTER FUNCTION "supaworker"."dequeue"("queue_name" character varying) OWNER TO "postgres";
ALTER TABLE "supaworker"."jobs"
ALTER COLUMN "id"
ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "supaworker"."jobs_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
  );
CREATE TABLE IF NOT EXISTS "supaworker"."logs" (
  "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
  "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
  "job" "jsonb" NOT NULL,
  "status" character varying NOT NULL
);
ALTER TABLE "supaworker"."logs" OWNER TO "postgres";
ALTER TABLE ONLY "supaworker"."jobs"
ADD CONSTRAINT "jobs_pkey" PRIMARY KEY ("id");
ALTER TABLE ONLY "supaworker"."logs"
ADD CONSTRAINT "logs_pkey" PRIMARY KEY ("id");
ALTER TABLE "supaworker"."jobs" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "supaworker"."logs" ENABLE ROW LEVEL SECURITY;
-- https://github.com/orgs/supabase/discussions/13680
ALTER PUBLICATION supabase_realtime
ADD TABLE supaworker.jobs;
-- Expose custom schema to service_role
-- https://supabase.com/docs/guides/api/using-custom-schemas
-- See config.toml for self-hosted Supabase
GRANT USAGE ON SCHEMA "supaworker" TO service_role;
GRANT ALL ON ALL TABLES IN SCHEMA "supaworker" TO service_role;
GRANT ALL ON ALL ROUTINES IN SCHEMA "supaworker" TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA "supaworker" TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "supaworker"
GRANT ALL ON TABLES TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "supaworker"
GRANT ALL ON ROUTINES TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA "supaworker"
GRANT ALL ON SEQUENCES TO service_role;